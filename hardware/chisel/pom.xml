<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>vat</groupId>
  <artifactId>vta</artifactId>
  <version>0.1.0-SNAPSHOT</version>
  <properties>
    <scala.version>2.12.13</scala.version>
  </properties>

  <name>vta</name>
  <!-- FIXME change it to the projects website -->
  <url>http://www.example.com</url>
<!--  <packaging>war</packaging>-->

<!--  <repositories>-->
<!--    <repository>-->
<!--      <id>scala-tools.org</id>-->
<!--      <name>Scala-Tools Maven2 Repository</name>-->
<!--      <url>http://scala-tools.org/repo-releases</url>-->
<!--    </repository>-->
<!--  </repositories>-->

<!--  <pluginRepositories>-->
<!--    <pluginRepository>-->
<!--      <id>scala-tools.org</id>-->
<!--      <name>Scala-Tools Maven2 Repository</name>-->
<!--      <url>http://scala-tools.org/repo-releases</url>-->
<!--    </pluginRepository>-->
<!--  </pluginRepositories>-->

  <dependencies>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scala.version}</version>
    </dependency>
<!--    <dependency>-->
<!--      <groupId>org.scala-tools</groupId>-->
<!--      <artifactId>maven-scala-plugin</artifactId>-->
<!--      <version>2.15.2</version>-->
<!--    </dependency>-->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.4</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.specs</groupId>
      <artifactId>specs</artifactId>
      <version>1.2.5</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>edu.berkeley.cs</groupId>
      <artifactId>chisel3_2.12</artifactId>
      <version>3.4.3</version>
    </dependency>

    <dependency>
      <groupId>edu.berkeley.cs</groupId>
      <artifactId>chisel-iotesters_2.12</artifactId>
      <version>1.5.3</version>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.10.3</version>
    </dependency>


<!--    <dependency>-->
<!--      <groupId>com.fasterxml.jackson.module</groupId>-->
<!--      <artifactId>jackson-module-scala</artifactId>-->
<!--      <version>2.10.3</version>-->

<!--    </dependency>-->

  </dependencies>

  <build>
    <sourceDirectory>src/main/scala</sourceDirectory>
    <testSourceDirectory>src/test/scala</testSourceDirectory>
    <extensions>
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>1.6.2</version>
      </extension>
    </extensions>

    <plugins>
      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <version>4.8.0</version>
        <configuration>
          <scalaVersion>${scala.version}</scalaVersion>
          <args>
            <arg>-Xsource:2.11</arg>
            <arg>-language:reflectiveCalls</arg>
            <arg>-deprecation</arg>
            <arg>-feature</arg>
            <arg>-Xcheckinit</arg>
          </args>
          <launchers>
            <launcher>
              <id>defaultXilinxSimple</id>
              <mainClass>vta.DefaultPynqConfig</mainClass>
              <!-- args are optional -->
              <args>
                <arg>arg1</arg>
              </args>
              <!-- jvmArgs are optional -->
              <jvmArgs>
                <jvmArg>-Xmx128m</jvmArg>
                <jvmArg>-Djava.library.path=./target/classes</jvmArg>
              </jvmArgs>
            </launcher>
            <!-- you could define other launcher -->
            <launcher>
              <id>TestXilinx</id>
              <mainClass>vta.TestDefaultPynqConfig</mainClass>
              <!-- args are optional -->
              <args>
                <arg>--target-dir</arg>
                <arg>D:/workspace/project/nn_compiler/vta-hw/cmake-build-release-mingw_x86_64/chisel</arg>
                <arg>-o</arg>
                <arg>Test.DefaultPynqConfig</arg>
              </args>
              <!-- jvmArgs are optional -->
              <jvmArgs>
                <jvmArg>-Xmx128m</jvmArg>
                <jvmArg>-Djava.library.path=./target/classes</jvmArg>
              </jvmArgs>
            </launcher>
          </launchers>
        </configuration>
      </plugin>
<!--      <plugin>-->
<!--        <groupId>org.apache.maven.plugins</groupId>-->
<!--        <artifactId>maven-compiler-plugin</artifactId>-->
<!--        <version>3.1</version>-->
<!--        <configuration>-->
<!--          <source>1.8</source>-->
<!--          <target>1.8</target>-->
<!--        </configuration>-->
<!--      </plugin>-->


<!--      <plugin>-->
<!--        <groupId>org.apache.maven.plugins</groupId>-->
<!--        <artifactId>maven-jar-plugin</artifactId>-->
<!--        <version>2.4</version>-->
<!--        <configuration>-->
<!--          <archive>-->
<!--            &lt;!&ndash; 生成的jar中，包含pom.xml和pom.properties这两个文件 &ndash;&gt;-->
<!--            <addMavenDescriptor>true</addMavenDescriptor>-->
<!--            &lt;!&ndash; 生成MANIFEST.MF的设置 &ndash;&gt;-->
<!--            <manifest>-->
<!--              &lt;!&ndash;这个属性特别关键，如果没有这个属性，有时候我们引用的包maven库-->
<!--              下面可能会有多个包，并且只有一个是正确的，其余的可能是带时间戳的，-->
<!--              此时会在classpath下面把那个带时间戳的给添加上去，然后我们-->
<!--              在依赖打包的时候，打的是正确的，所以两头会对不上，报错。&ndash;&gt;-->
<!--              <useUniqueVersions>false</useUniqueVersions>-->
<!--              &lt;!&ndash; 为依赖包添加路径, 这些路径会写在MANIFEST文件的Class-Path下 &ndash;&gt;-->
<!--              <addClasspath>true</addClasspath>-->
<!--              &lt;!&ndash; 这个jar所依赖的jar包添加classPath的时候的前缀，如果这个-->
<!--              jar本身和依赖包在同一级目录，则不需要添加&ndash;&gt;-->
<!--              <classpathPrefix>lib/</classpathPrefix>-->
<!--              &lt;!&ndash; jar启动入口类&ndash;&gt;-->
<!--              <mainClass>com.test.Test</mainClass>-->
<!--            </manifest>-->
<!--            <manifestEntries>-->
<!--              &lt;!&ndash; 在Class-Path下添加配置文件的路径 &ndash;&gt;-->
<!--              <Class-Path>../config/</Class-Path>-->
<!--              &lt;!&ndash; 假如这个项目可能要引入一些外部资源，但是你打包的时候并不想把-->
<!--              这些资源文件打进包里面，这个时候你必须在这边额外指定一些这些资源-->
<!--              文件的路径，这个位置指定的话，要根据你预期的这些位置去设置，我这边-->
<!--              所有jar都在lib下，资源文件都在config下，lib和config是同级的 &ndash;&gt;-->
<!--              &lt;!&ndash; 同时还需要注意另外一个问题，假如你的pom文件里面配置了-->
<!--              <scope>system</scope>,就是你依赖是你本地的资源，这个时候使用-->
<!--              这个插件，classPath里面是不会添加，所以你得手动把这个依赖添加进-->
<!--              这个地方，用空格隔开就行&ndash;&gt;-->
<!--            </manifestEntries>-->
<!--          </archive>-->
<!--          &lt;!&ndash; jar包的位置&ndash;&gt;-->
<!--          <outputDirectory>${project.build.directory}/lib</outputDirectory>-->
<!--          <includes>-->
<!--            &lt;!&ndash; 打jar包时，只打包class文件 &ndash;&gt;-->
<!--            &lt;!&ndash; 有时候可能需要一些其他文件，这边可以配置，包括剔除的文件等等&ndash;&gt;-->
<!--            <include>**/*.class</include>-->
<!--          </includes>-->
<!--        </configuration>-->
<!--      </plugin>-->

<!--      <plugin>-->
<!--        <groupId>org.apache.maven.plugins</groupId>-->
<!--        <artifactId>maven-resources-plugin</artifactId>-->
<!--        <version>2.6</version>-->
<!--        <executions>-->
<!--          &lt;!&ndash; 一个execution就是一个目标输入位置，如果想把各种资源拆开放的话，就-->
<!--          可以创建多个execution，一个资源文件可以被拷贝多份 &ndash;&gt;-->
<!--          <execution>-->
<!--            <id>copy-resources</id>-->
<!--            <phase>package</phase>-->
<!--            <goals>-->
<!--              <goal>copy-resources</goal>-->
<!--            </goals>-->
<!--            <configuration>-->
<!--              <encoding>UTF-8</encoding>-->
<!--              &lt;!&ndash; 资源文件的输出目录 &ndash;&gt;-->
<!--              <outputDirectory>{project.build.directory}/config</outputDirectory>-->
<!--              <resources>-->
<!--                &lt;!&ndash; 资源文件的原始目录，有多个的话就多配几个 &ndash;&gt;-->
<!--                <resource>-->
<!--                  &lt;!&ndash; 原始目录 &ndash;&gt;-->
<!--                  <directory>src/main/resources</directory>-->
<!--                  &lt;!&ndash; 是否使用过滤器，如果是的话，需要配置一下才行-->
<!--                  这个后续再研究，这边没有使用到 &ndash;&gt;-->
<!--                  <filtering>true</filtering>-->
<!--                  &lt;!&ndash; 包含哪些文件以及去除调哪些文件等等 &ndash;&gt;-->
<!--                  <includes>-->
<!--                    <include>**/*.*</include>-->
<!--                  </includes>-->
<!--                  <excludes>-->
<!--                    <exclude>**/*.json</exclude>-->
<!--                  </excludes>-->
<!--                </resource>-->
<!--              </resources>-->
<!--            </configuration>-->
<!--          </execution>-->
<!--        </executions>-->
<!--      </plugin>-->

      <plugin>
        <groupId>edu.berkeley.cs</groupId>
        <artifactId>chisel3-plugin_2.12.13</artifactId>
        <version>3.4.3</version>
      </plugin>

      <plugin>
        <groupId>org.scalamacros</groupId>
        <artifactId>paradise_2.12.13</artifactId>
        <version>2.1.1</version>
      </plugin>
    </plugins>

  </build>
</project>
