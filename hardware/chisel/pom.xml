<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>vat</groupId>
  <artifactId>vta</artifactId>
  <version>0.1.0-SNAPSHOT</version>

  <name>vta</name>
  <!-- FIXME change it to the projects website -->
  <url>http://www.example.com</url>
<!--  <packaging>war</packaging>-->

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
    <os.detected.classifier>linux-x86_64</os.detected.classifier>
  </properties>

  <dependencies>
    <dependency>
      <groupId>edu.berkeley.cs</groupId>
      <artifactId>chisel3_2.12</artifactId>
      <version>3.4.3</version>
    </dependency>

    <dependency>
      <groupId>edu.berkeley.cs</groupId>
      <artifactId>chisel-iotesters_2.12</artifactId>
      <version>1.5.3</version>

    </dependency>

  </dependencies>

  <build>
    <extensions>
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>1.6.2</version>
      </extension>
    </extensions>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.4</version>
        <configuration>
          <archive>
            <!-- 生成的jar中，包含pom.xml和pom.properties这两个文件 -->
            <addMavenDescriptor>true</addMavenDescriptor>
            <!-- 生成MANIFEST.MF的设置 -->
            <manifest>
              <!--这个属性特别关键，如果没有这个属性，有时候我们引用的包maven库
              下面可能会有多个包，并且只有一个是正确的，其余的可能是带时间戳的，
              此时会在classpath下面把那个带时间戳的给添加上去，然后我们
              在依赖打包的时候，打的是正确的，所以两头会对不上，报错。-->
              <useUniqueVersions>false</useUniqueVersions>
              <!-- 为依赖包添加路径, 这些路径会写在MANIFEST文件的Class-Path下 -->
              <addClasspath>true</addClasspath>
              <!-- 这个jar所依赖的jar包添加classPath的时候的前缀，如果这个
              jar本身和依赖包在同一级目录，则不需要添加-->
              <classpathPrefix>lib/</classpathPrefix>
              <!-- jar启动入口类-->
              <mainClass>com.test.Test</mainClass>
            </manifest>
            <manifestEntries>
              <!-- 在Class-Path下添加配置文件的路径 -->
              <Class-Path>../config/</Class-Path>
              <!-- 假如这个项目可能要引入一些外部资源，但是你打包的时候并不想把
              这些资源文件打进包里面，这个时候你必须在这边额外指定一些这些资源
              文件的路径，这个位置指定的话，要根据你预期的这些位置去设置，我这边
              所有jar都在lib下，资源文件都在config下，lib和config是同级的 -->
              <!-- 同时还需要注意另外一个问题，假如你的pom文件里面配置了
              <scope>system</scope>,就是你依赖是你本地的资源，这个时候使用
              这个插件，classPath里面是不会添加，所以你得手动把这个依赖添加进
              这个地方，用空格隔开就行-->
            </manifestEntries>
          </archive>
          <!-- jar包的位置-->
          <outputDirectory>${project.build.directory}/lib</outputDirectory>
          <includes>
            <!-- 打jar包时，只打包class文件 -->
            <!-- 有时候可能需要一些其他文件，这边可以配置，包括剔除的文件等等-->
            <include>**/*.class</include>
          </includes>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.6</version>
        <executions>
          <!-- 一个execution就是一个目标输入位置，如果想把各种资源拆开放的话，就
          可以创建多个execution，一个资源文件可以被拷贝多份 -->
          <execution>
            <id>copy-resources</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <encoding>UTF-8</encoding>
              <!-- 资源文件的输出目录 -->
              <outputDirectory>{project.build.directory}/config</outputDirectory>
              <resources>
                <!-- 资源文件的原始目录，有多个的话就多配几个 -->
                <resource>
                  <!-- 原始目录 -->
                  <directory>src/main/resources</directory>
                  <!-- 是否使用过滤器，如果是的话，需要配置一下才行
                  这个后续再研究，这边没有使用到 -->
                  <filtering>true</filtering>
                  <!-- 包含哪些文件以及去除调哪些文件等等 -->
                  <includes>
                    <include>**/*.*</include>
                  </includes>
                  <excludes>
                    <exclude>**/*.json</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>edu.berkeley.cs</groupId>
        <artifactId>chisel3-plugin_2.12.13</artifactId>
        <version>3.4.3</version>
      </plugin>

      <plugin>
        <groupId>org.scalamacros</groupId>
        <artifactId>paradise_2.12.13</artifactId>
        <version>2.1.1</version>
      </plugin>
    </plugins>

  </build>
</project>
