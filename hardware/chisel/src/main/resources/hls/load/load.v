// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="load,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.599000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=4380,HLS_SYN_LUT=17579,HLS_VERSION=2019_1}" *)

module load (
        ap_clk,
        ap_rst_n,
        m_axi_data_port_AWVALID,
        m_axi_data_port_AWREADY,
        m_axi_data_port_AWADDR,
        m_axi_data_port_AWID,
        m_axi_data_port_AWLEN,
        m_axi_data_port_AWSIZE,
        m_axi_data_port_AWBURST,
        m_axi_data_port_AWLOCK,
        m_axi_data_port_AWCACHE,
        m_axi_data_port_AWPROT,
        m_axi_data_port_AWQOS,
        m_axi_data_port_AWREGION,
        m_axi_data_port_AWUSER,
        m_axi_data_port_WVALID,
        m_axi_data_port_WREADY,
        m_axi_data_port_WDATA,
        m_axi_data_port_WSTRB,
        m_axi_data_port_WLAST,
        m_axi_data_port_WID,
        m_axi_data_port_WUSER,
        m_axi_data_port_ARVALID,
        m_axi_data_port_ARREADY,
        m_axi_data_port_ARADDR,
        m_axi_data_port_ARID,
        m_axi_data_port_ARLEN,
        m_axi_data_port_ARSIZE,
        m_axi_data_port_ARBURST,
        m_axi_data_port_ARLOCK,
        m_axi_data_port_ARCACHE,
        m_axi_data_port_ARPROT,
        m_axi_data_port_ARQOS,
        m_axi_data_port_ARREGION,
        m_axi_data_port_ARUSER,
        m_axi_data_port_RVALID,
        m_axi_data_port_RREADY,
        m_axi_data_port_RDATA,
        m_axi_data_port_RLAST,
        m_axi_data_port_RID,
        m_axi_data_port_RUSER,
        m_axi_data_port_RRESP,
        m_axi_data_port_BVALID,
        m_axi_data_port_BREADY,
        m_axi_data_port_BRESP,
        m_axi_data_port_BID,
        m_axi_data_port_BUSER,
        load_queue_V_V_TDATA,
        load_queue_V_V_TVALID,
        load_queue_V_V_TREADY,
        g2l_dep_queue_V_TDATA,
        g2l_dep_queue_V_TVALID,
        g2l_dep_queue_V_TREADY,
        l2g_dep_queue_V_TDATA,
        l2g_dep_queue_V_TVALID,
        l2g_dep_queue_V_TREADY,
        inp_mem_V_Addr_A,
        inp_mem_V_EN_A,
        inp_mem_V_WEN_A,
        inp_mem_V_Din_A,
        inp_mem_V_Dout_A,
        inp_mem_V_Clk_A,
        inp_mem_V_Rst_A,
        wgt_mem_0_V_Addr_A,
        wgt_mem_0_V_EN_A,
        wgt_mem_0_V_WEN_A,
        wgt_mem_0_V_Din_A,
        wgt_mem_0_V_Dout_A,
        wgt_mem_0_V_Clk_A,
        wgt_mem_0_V_Rst_A,
        wgt_mem_1_V_Addr_A,
        wgt_mem_1_V_EN_A,
        wgt_mem_1_V_WEN_A,
        wgt_mem_1_V_Din_A,
        wgt_mem_1_V_Dout_A,
        wgt_mem_1_V_Clk_A,
        wgt_mem_1_V_Rst_A,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_pp0_stage0 = 28'd1024;
parameter    ap_ST_fsm_pp0_stage1 = 28'd2048;
parameter    ap_ST_fsm_state15 = 28'd4096;
parameter    ap_ST_fsm_state16 = 28'd8192;
parameter    ap_ST_fsm_state17 = 28'd16384;
parameter    ap_ST_fsm_state18 = 28'd32768;
parameter    ap_ST_fsm_state19 = 28'd65536;
parameter    ap_ST_fsm_state20 = 28'd131072;
parameter    ap_ST_fsm_state21 = 28'd262144;
parameter    ap_ST_fsm_state22 = 28'd524288;
parameter    ap_ST_fsm_state23 = 28'd1048576;
parameter    ap_ST_fsm_state24 = 28'd2097152;
parameter    ap_ST_fsm_state25 = 28'd4194304;
parameter    ap_ST_fsm_pp1_stage0 = 28'd8388608;
parameter    ap_ST_fsm_state30 = 28'd16777216;
parameter    ap_ST_fsm_state31 = 28'd33554432;
parameter    ap_ST_fsm_state32 = 28'd67108864;
parameter    ap_ST_fsm_state33 = 28'd134217728;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_PORT_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_PORT_DATA_WIDTH = 64;
parameter    C_M_AXI_DATA_PORT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PORT_USER_VALUE = 0;
parameter    C_M_AXI_DATA_PORT_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_PORT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_PORT_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_data_port_AWVALID;
input   m_axi_data_port_AWREADY;
output  [C_M_AXI_DATA_PORT_ADDR_WIDTH - 1:0] m_axi_data_port_AWADDR;
output  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_AWID;
output  [7:0] m_axi_data_port_AWLEN;
output  [2:0] m_axi_data_port_AWSIZE;
output  [1:0] m_axi_data_port_AWBURST;
output  [1:0] m_axi_data_port_AWLOCK;
output  [3:0] m_axi_data_port_AWCACHE;
output  [2:0] m_axi_data_port_AWPROT;
output  [3:0] m_axi_data_port_AWQOS;
output  [3:0] m_axi_data_port_AWREGION;
output  [C_M_AXI_DATA_PORT_AWUSER_WIDTH - 1:0] m_axi_data_port_AWUSER;
output   m_axi_data_port_WVALID;
input   m_axi_data_port_WREADY;
output  [C_M_AXI_DATA_PORT_DATA_WIDTH - 1:0] m_axi_data_port_WDATA;
output  [C_M_AXI_DATA_PORT_WSTRB_WIDTH - 1:0] m_axi_data_port_WSTRB;
output   m_axi_data_port_WLAST;
output  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_WID;
output  [C_M_AXI_DATA_PORT_WUSER_WIDTH - 1:0] m_axi_data_port_WUSER;
output   m_axi_data_port_ARVALID;
input   m_axi_data_port_ARREADY;
output  [C_M_AXI_DATA_PORT_ADDR_WIDTH - 1:0] m_axi_data_port_ARADDR;
output  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_ARID;
output  [7:0] m_axi_data_port_ARLEN;
output  [2:0] m_axi_data_port_ARSIZE;
output  [1:0] m_axi_data_port_ARBURST;
output  [1:0] m_axi_data_port_ARLOCK;
output  [3:0] m_axi_data_port_ARCACHE;
output  [2:0] m_axi_data_port_ARPROT;
output  [3:0] m_axi_data_port_ARQOS;
output  [3:0] m_axi_data_port_ARREGION;
output  [C_M_AXI_DATA_PORT_ARUSER_WIDTH - 1:0] m_axi_data_port_ARUSER;
input   m_axi_data_port_RVALID;
output   m_axi_data_port_RREADY;
input  [C_M_AXI_DATA_PORT_DATA_WIDTH - 1:0] m_axi_data_port_RDATA;
input   m_axi_data_port_RLAST;
input  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_RID;
input  [C_M_AXI_DATA_PORT_RUSER_WIDTH - 1:0] m_axi_data_port_RUSER;
input  [1:0] m_axi_data_port_RRESP;
input   m_axi_data_port_BVALID;
output   m_axi_data_port_BREADY;
input  [1:0] m_axi_data_port_BRESP;
input  [C_M_AXI_DATA_PORT_ID_WIDTH - 1:0] m_axi_data_port_BID;
input  [C_M_AXI_DATA_PORT_BUSER_WIDTH - 1:0] m_axi_data_port_BUSER;
input  [127:0] load_queue_V_V_TDATA;
input   load_queue_V_V_TVALID;
output   load_queue_V_V_TREADY;
input  [7:0] g2l_dep_queue_V_TDATA;
input   g2l_dep_queue_V_TVALID;
output   g2l_dep_queue_V_TREADY;
output  [7:0] l2g_dep_queue_V_TDATA;
output   l2g_dep_queue_V_TVALID;
input   l2g_dep_queue_V_TREADY;
output  [31:0] inp_mem_V_Addr_A;
output   inp_mem_V_EN_A;
output  [15:0] inp_mem_V_WEN_A;
output  [127:0] inp_mem_V_Din_A;
input  [127:0] inp_mem_V_Dout_A;
output   inp_mem_V_Clk_A;
output   inp_mem_V_Rst_A;
output  [31:0] wgt_mem_0_V_Addr_A;
output   wgt_mem_0_V_EN_A;
output  [127:0] wgt_mem_0_V_WEN_A;
output  [1023:0] wgt_mem_0_V_Din_A;
input  [1023:0] wgt_mem_0_V_Dout_A;
output   wgt_mem_0_V_Clk_A;
output   wgt_mem_0_V_Rst_A;
output  [31:0] wgt_mem_1_V_Addr_A;
output   wgt_mem_1_V_EN_A;
output  [127:0] wgt_mem_1_V_WEN_A;
output  [1023:0] wgt_mem_1_V_Din_A;
input  [1023:0] wgt_mem_1_V_Dout_A;
output   wgt_mem_1_V_Clk_A;
output   wgt_mem_1_V_Rst_A;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

reg[31:0] inp_mem_V_Addr_A;
reg inp_mem_V_EN_A;
reg[15:0] inp_mem_V_WEN_A;
reg[127:0] inp_mem_V_Din_A;
reg wgt_mem_0_V_EN_A;
reg[127:0] wgt_mem_0_V_WEN_A;
reg wgt_mem_1_V_EN_A;
reg[127:0] wgt_mem_1_V_WEN_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] inputs_V;
wire   [31:0] weights_V;
reg   [127:0] load_queue_V_V_0_data_out;
wire    load_queue_V_V_0_vld_in;
wire    load_queue_V_V_0_vld_out;
wire    load_queue_V_V_0_ack_in;
reg    load_queue_V_V_0_ack_out;
reg   [127:0] load_queue_V_V_0_payload_A;
reg   [127:0] load_queue_V_V_0_payload_B;
reg    load_queue_V_V_0_sel_rd;
reg    load_queue_V_V_0_sel_wr;
wire    load_queue_V_V_0_sel;
wire    load_queue_V_V_0_load_A;
wire    load_queue_V_V_0_load_B;
reg   [1:0] load_queue_V_V_0_state;
wire    load_queue_V_V_0_state_cmp_full;
wire    g2l_dep_queue_V_0_vld_in;
wire    g2l_dep_queue_V_0_vld_out;
reg    g2l_dep_queue_V_0_ack_out;
reg   [1:0] g2l_dep_queue_V_0_state;
wire   [7:0] l2g_dep_queue_V_1_data_out;
reg    l2g_dep_queue_V_1_vld_in;
wire    l2g_dep_queue_V_1_vld_out;
wire    l2g_dep_queue_V_1_ack_in;
wire    l2g_dep_queue_V_1_ack_out;
reg    l2g_dep_queue_V_1_sel_rd;
wire    l2g_dep_queue_V_1_sel;
reg   [1:0] l2g_dep_queue_V_1_state;
reg    data_port_blk_n_AR;
wire    ap_CS_fsm_state19;
reg    data_port_blk_n_R;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln67_reg_1412;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln89_reg_1276;
reg    load_queue_V_V_TDATA_blk_n;
reg    g2l_dep_queue_V_TDATA_blk_n;
wire   [0:0] tmp_2_fu_508_p3;
reg    l2g_dep_queue_V_TDATA_blk_n;
wire    ap_CS_fsm_state32;
wire   [0:0] tmp_7_fu_1154_p3;
wire    ap_CS_fsm_state33;
reg   [0:0] tmp_7_reg_1475;
wire    data_port_AWREADY;
wire    data_port_WREADY;
reg    data_port_ARVALID;
wire    data_port_ARREADY;
reg   [31:0] data_port_ARADDR;
reg   [31:0] data_port_ARLEN;
wire    data_port_RVALID;
reg    data_port_RREADY;
wire   [63:0] data_port_RDATA;
wire    data_port_RLAST;
wire   [0:0] data_port_RID;
wire   [0:0] data_port_RUSER;
wire   [1:0] data_port_RRESP;
wire    data_port_BVALID;
wire   [1:0] data_port_BRESP;
wire   [0:0] data_port_BID;
wire   [0:0] data_port_BUSER;
reg   [20:0] phi_ln89_reg_365;
reg   [16:0] phi_ln67_reg_407;
reg   [15:0] reg_464;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln206_fu_618_p2;
wire   [0:0] icmp_ln219_fu_624_p2;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    grp_reset_mem_fu_418_ap_ready;
wire    grp_reset_mem_fu_418_ap_done;
reg   [15:0] reg_476;
wire   [37:0] p_cast8_fu_490_p1;
reg   [37:0] p_cast8_reg_1161;
reg    ap_block_state1;
wire   [33:0] p_cast7_fu_504_p1;
reg   [33:0] p_cast7_reg_1166;
reg   [127:0] tmp_V_reg_1171;
wire   [127:0] lshr_ln200_fu_516_p2;
wire   [3:0] trunc_ln200_fu_522_p1;
reg   [3:0] trunc_ln200_reg_1190;
wire   [15:0] trunc_ln200_1_fu_530_p4;
reg   [15:0] trunc_ln200_1_reg_1195;
wire   [3:0] trunc_ln200_2_fu_546_p1;
reg   [3:0] trunc_ln200_2_reg_1203;
wire  signed [15:0] x_width_V_fu_564_p2;
reg  signed [15:0] x_width_V_reg_1208;
wire   [15:0] zext_ln200_1_fu_570_p1;
reg   [15:0] zext_ln200_1_reg_1214;
wire   [15:0] y_offset_0_V_fu_586_p2;
reg   [15:0] y_offset_0_V_reg_1219;
wire   [15:0] y_offset_1_V_fu_604_p2;
reg   [15:0] y_offset_1_V_reg_1224;
reg   [0:0] icmp_ln206_reg_1229;
reg   [0:0] icmp_ln219_reg_1233;
wire   [31:0] zext_ln700_1_fu_630_p1;
reg   [31:0] zext_ln700_1_reg_1237;
wire   [20:0] shl_ln1_fu_634_p3;
reg   [20:0] shl_ln1_reg_1242;
wire   [31:0] zext_ln89_fu_641_p1;
reg   [31:0] zext_ln89_reg_1247;
wire   [15:0] y_1_fu_651_p2;
reg   [15:0] y_1_reg_1255;
wire    ap_CS_fsm_state3;
wire   [37:0] add_ln88_fu_669_p2;
reg   [37:0] add_ln88_reg_1260;
wire   [0:0] icmp_ln86_fu_645_p2;
wire   [16:0] shl_ln89_1_fu_688_p3;
reg   [16:0] shl_ln89_1_reg_1271;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln89_fu_696_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state11_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [20:0] add_ln89_fu_701_p2;
reg   [20:0] add_ln89_reg_1280;
wire   [0:0] trunc_ln89_2_fu_711_p1;
reg   [0:0] trunc_ln89_2_reg_1285;
reg   [0:0] trunc_ln89_2_reg_1285_pp0_iter1_reg;
reg   [11:0] lshr_ln1_reg_1290;
reg   [3:0] tmp_9_reg_1295;
reg   [63:0] data_port_addr_1_rea_reg_1300;
reg    ap_block_state12_pp0_stage1_iter0;
wire    ap_block_state14_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [9:0] shl_ln89_2_fu_740_p3;
reg   [9:0] shl_ln89_2_reg_1305;
wire   [9:0] empty_20_fu_747_p2;
reg   [9:0] empty_20_reg_1310;
wire   [0:0] icmp_ln89_1_fu_753_p2;
reg   [0:0] icmp_ln89_1_reg_1315;
reg   [9:0] wgt_mem_0_V_addr_reg_1323;
reg   [9:0] wgt_mem_1_V_addr_reg_1328;
wire   [1023:0] and_ln89_fu_853_p2;
reg   [1023:0] and_ln89_reg_1333;
wire   [1023:0] and_ln89_2_fu_859_p2;
reg   [1023:0] and_ln89_2_reg_1338;
wire   [15:0] add_ln700_2_fu_890_p2;
wire    ap_CS_fsm_state15;
wire   [31:0] add_ln700_3_fu_895_p2;
wire   [15:0] grp_reset_mem_fu_418_ap_return;
wire   [15:0] zext_ln209_1_fu_900_p1;
reg   [15:0] zext_ln209_1_reg_1358;
wire   [31:0] zext_ln700_fu_903_p1;
reg   [31:0] zext_ln700_reg_1363;
wire   [16:0] shl_ln_fu_907_p3;
reg   [16:0] shl_ln_reg_1368;
wire   [31:0] zext_ln67_fu_914_p1;
reg   [31:0] zext_ln67_reg_1373;
wire   [15:0] y_fu_924_p2;
reg   [15:0] y_reg_1381;
wire    ap_CS_fsm_state18;
wire   [33:0] add_ln66_fu_942_p2;
reg   [33:0] add_ln66_reg_1386;
wire   [0:0] icmp_ln62_fu_918_p2;
reg   [15:0] sram_idx_V_assign_3_reg_1391;
wire   [12:0] trunc_ln67_fu_957_p1;
reg   [12:0] trunc_ln67_reg_1402;
wire   [13:0] shl_ln67_1_fu_961_p3;
reg   [13:0] shl_ln67_1_reg_1407;
wire    ap_CS_fsm_state25;
wire   [0:0] icmp_ln67_fu_968_p2;
wire    ap_block_state26_pp1_stage0_iter0;
reg    ap_block_state27_pp1_stage0_iter1;
wire    ap_block_state28_pp1_stage0_iter2;
wire    ap_block_state29_pp1_stage0_iter3;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln67_reg_1412_pp1_iter1_reg;
reg   [0:0] icmp_ln67_reg_1412_pp1_iter2_reg;
wire   [16:0] add_ln67_fu_973_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [12:0] lshr_ln_reg_1421;
reg   [12:0] lshr_ln_reg_1421_pp1_iter1_reg;
reg   [12:0] lshr_ln_reg_1421_pp1_iter2_reg;
wire   [0:0] trunc_ln67_2_fu_998_p1;
reg   [0:0] trunc_ln67_2_reg_1426;
reg   [0:0] trunc_ln67_2_reg_1426_pp1_iter1_reg;
reg   [0:0] trunc_ln67_2_reg_1426_pp1_iter2_reg;
reg   [63:0] data_port_addr_read_reg_1432;
wire   [6:0] shl_ln67_2_fu_1002_p3;
reg   [6:0] shl_ln67_2_reg_1437;
wire   [6:0] empty_17_fu_1009_p2;
reg   [6:0] empty_17_reg_1442;
wire   [0:0] icmp_ln67_1_fu_1015_p2;
reg   [0:0] icmp_ln67_1_reg_1447;
wire   [127:0] and_ln67_1_fu_1116_p2;
reg   [127:0] and_ln67_1_reg_1455;
wire   [15:0] add_ln700_fu_1144_p2;
reg   [15:0] add_ln700_reg_1460;
wire    ap_CS_fsm_state30;
wire   [31:0] add_ln700_1_fu_1149_p2;
reg   [31:0] add_ln700_1_reg_1465;
wire    ap_CS_fsm_state31;
reg    ap_block_state32_io;
reg    ap_block_state32_on_subcall_done;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state11;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state26;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
wire    grp_reset_mem_fu_418_ap_start;
wire    grp_reset_mem_fu_418_ap_idle;
reg   [15:0] grp_reset_mem_fu_418_sram_idx_V_read;
reg   [15:0] grp_reset_mem_fu_418_range_V;
wire   [31:0] grp_reset_mem_fu_418_mem_V_Addr_A;
wire    grp_reset_mem_fu_418_mem_V_EN_A;
wire   [15:0] grp_reset_mem_fu_418_mem_V_WEN_A;
wire   [127:0] grp_reset_mem_fu_418_mem_V_Din_A;
reg   [15:0] sram_idx_V_assign_1_s_reg_334;
reg   [31:0] dram_idx_assign_1_0_reg_344;
reg   [15:0] i_op_assign_1_reg_354;
reg   [20:0] ap_phi_mux_phi_ln89_phi_fu_369_p4;
wire    ap_block_pp0_stage0;
reg   [15:0] sram_idx_V_assign_0_reg_376;
reg   [31:0] dram_idx_assign_0_reg_386;
reg   [15:0] i_op_assign_reg_396;
reg    grp_reset_mem_fu_418_ap_start_reg;
wire   [63:0] zext_ln89_1_fu_759_p1;
wire   [63:0] zext_ln67_1_fu_1122_p1;
wire   [63:0] zext_ln88_fu_674_p1;
wire   [63:0] zext_ln66_fu_947_p1;
reg   [31:0] wgt_mem_1_V_Addr_A_orig;
wire   [1023:0] or_ln89_fu_883_p2;
reg   [31:0] wgt_mem_0_V_Addr_A_orig;
wire   [31:0] inp_mem_V_Addr_A_orig;
wire   [15:0] shl_ln67_4_fu_1137_p2;
wire   [28:0] tmp_fu_480_p4;
wire   [28:0] tmp_1_fu_494_p4;
wire   [127:0] lshr_ln200_1_fu_540_p2;
wire   [4:0] zext_ln301_fu_550_p1;
wire   [4:0] zext_ln200_fu_526_p1;
wire   [4:0] add_ln301_fu_554_p2;
wire   [15:0] zext_ln301_1_fu_560_p1;
wire   [3:0] trunc_ln1_fu_573_p4;
wire   [3:0] y_offset_0_V_fu_586_p1;
wire   [3:0] trunc_ln209_1_fu_591_p4;
wire   [3:0] y_offset_1_V_fu_604_p1;
wire   [2:0] trunc_ln2_fu_609_p4;
wire   [15:0] grp_fu_455_p4;
wire   [36:0] ret_V_1_fu_657_p3;
wire   [37:0] zext_ln1352_1_fu_665_p1;
wire   [11:0] trunc_ln89_fu_684_p1;
wire   [16:0] trunc_ln89_1_fu_707_p1;
wire   [16:0] add_ln89_1_fu_715_p2;
wire   [10:0] zext_ln89_2_fu_764_p1;
wire   [10:0] zext_ln89_3_fu_767_p1;
wire   [10:0] xor_ln89_fu_773_p2;
wire   [10:0] select_ln89_1_fu_779_p3;
wire   [10:0] select_ln89_3_fu_793_p3;
wire   [10:0] select_ln89_2_fu_786_p3;
wire   [10:0] xor_ln89_1_fu_800_p2;
wire   [1023:0] zext_ln89_4_fu_770_p1;
wire   [1023:0] zext_ln89_5_fu_806_p1;
wire   [1023:0] shl_ln89_fu_818_p2;
reg   [1023:0] tmp_8_fu_824_p4;
wire   [1023:0] zext_ln89_6_fu_810_p1;
wire   [1023:0] zext_ln89_7_fu_814_p1;
wire   [1023:0] shl_ln89_3_fu_841_p2;
wire   [1023:0] lshr_ln89_fu_847_p2;
wire   [1023:0] select_ln89_4_fu_834_p3;
wire   [1023:0] select_ln89_fu_865_p3;
wire   [1023:0] xor_ln89_2_fu_872_p2;
wire   [1023:0] and_ln89_1_fu_877_p2;
wire   [32:0] ret_V_fu_930_p3;
wire   [33:0] zext_ln1352_fu_938_p1;
wire   [13:0] trunc_ln67_1_fu_979_p1;
wire   [13:0] add_ln67_1_fu_983_p2;
wire   [7:0] zext_ln67_2_fu_1021_p1;
wire   [7:0] zext_ln67_3_fu_1024_p1;
wire   [7:0] xor_ln67_fu_1030_p2;
wire   [7:0] select_ln67_fu_1036_p3;
wire   [7:0] select_ln67_2_fu_1050_p3;
wire   [7:0] select_ln67_1_fu_1043_p3;
wire   [7:0] xor_ln67_1_fu_1057_p2;
wire   [127:0] zext_ln67_4_fu_1027_p1;
wire   [127:0] zext_ln67_5_fu_1063_p1;
wire   [127:0] shl_ln67_fu_1075_p2;
reg   [127:0] tmp_3_fu_1081_p4;
wire   [127:0] zext_ln67_6_fu_1067_p1;
wire   [127:0] zext_ln67_7_fu_1071_p1;
wire   [127:0] shl_ln67_3_fu_1098_p2;
wire   [127:0] lshr_ln67_fu_1104_p2;
wire   [127:0] select_ln67_3_fu_1091_p3;
wire   [127:0] and_ln67_fu_1110_p2;
wire   [3:0] tmp_5_fu_1126_p3;
wire   [15:0] zext_ln67_8_fu_1133_p1;
reg    ap_block_state33;
reg    ap_block_state33_io;
reg   [27:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [15:0] y_offset_0_V_fu_586_p10;
wire   [15:0] y_offset_1_V_fu_604_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
#0 load_queue_V_V_0_sel_rd = 1'b0;
#0 load_queue_V_V_0_sel_wr = 1'b0;
#0 load_queue_V_V_0_state = 2'd0;
#0 g2l_dep_queue_V_0_state = 2'd0;
#0 l2g_dep_queue_V_1_sel_rd = 1'b0;
#0 l2g_dep_queue_V_1_state = 2'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 grp_reset_mem_fu_418_ap_start_reg = 1'b0;
end

load_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
load_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .inputs_V(inputs_V),
    .weights_V(weights_V)
);

load_data_port_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_PORT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_PORT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_PORT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_PORT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_PORT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_PORT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_PORT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_PORT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_PORT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_PORT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_PORT_CACHE_VALUE ))
load_data_port_m_axi_U(
    .AWVALID(m_axi_data_port_AWVALID),
    .AWREADY(m_axi_data_port_AWREADY),
    .AWADDR(m_axi_data_port_AWADDR),
    .AWID(m_axi_data_port_AWID),
    .AWLEN(m_axi_data_port_AWLEN),
    .AWSIZE(m_axi_data_port_AWSIZE),
    .AWBURST(m_axi_data_port_AWBURST),
    .AWLOCK(m_axi_data_port_AWLOCK),
    .AWCACHE(m_axi_data_port_AWCACHE),
    .AWPROT(m_axi_data_port_AWPROT),
    .AWQOS(m_axi_data_port_AWQOS),
    .AWREGION(m_axi_data_port_AWREGION),
    .AWUSER(m_axi_data_port_AWUSER),
    .WVALID(m_axi_data_port_WVALID),
    .WREADY(m_axi_data_port_WREADY),
    .WDATA(m_axi_data_port_WDATA),
    .WSTRB(m_axi_data_port_WSTRB),
    .WLAST(m_axi_data_port_WLAST),
    .WID(m_axi_data_port_WID),
    .WUSER(m_axi_data_port_WUSER),
    .ARVALID(m_axi_data_port_ARVALID),
    .ARREADY(m_axi_data_port_ARREADY),
    .ARADDR(m_axi_data_port_ARADDR),
    .ARID(m_axi_data_port_ARID),
    .ARLEN(m_axi_data_port_ARLEN),
    .ARSIZE(m_axi_data_port_ARSIZE),
    .ARBURST(m_axi_data_port_ARBURST),
    .ARLOCK(m_axi_data_port_ARLOCK),
    .ARCACHE(m_axi_data_port_ARCACHE),
    .ARPROT(m_axi_data_port_ARPROT),
    .ARQOS(m_axi_data_port_ARQOS),
    .ARREGION(m_axi_data_port_ARREGION),
    .ARUSER(m_axi_data_port_ARUSER),
    .RVALID(m_axi_data_port_RVALID),
    .RREADY(m_axi_data_port_RREADY),
    .RDATA(m_axi_data_port_RDATA),
    .RLAST(m_axi_data_port_RLAST),
    .RID(m_axi_data_port_RID),
    .RUSER(m_axi_data_port_RUSER),
    .RRESP(m_axi_data_port_RRESP),
    .BVALID(m_axi_data_port_BVALID),
    .BREADY(m_axi_data_port_BREADY),
    .BRESP(m_axi_data_port_BRESP),
    .BID(m_axi_data_port_BID),
    .BUSER(m_axi_data_port_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(data_port_ARVALID),
    .I_ARREADY(data_port_ARREADY),
    .I_ARADDR(data_port_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(data_port_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(data_port_RVALID),
    .I_RREADY(data_port_RREADY),
    .I_RDATA(data_port_RDATA),
    .I_RID(data_port_RID),
    .I_RUSER(data_port_RUSER),
    .I_RRESP(data_port_RRESP),
    .I_RLAST(data_port_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(data_port_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(data_port_WREADY),
    .I_WDATA(64'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(8'd0),
    .I_BVALID(data_port_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(data_port_BRESP),
    .I_BID(data_port_BID),
    .I_BUSER(data_port_BUSER)
);

reset_mem grp_reset_mem_fu_418(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_reset_mem_fu_418_ap_start),
    .ap_done(grp_reset_mem_fu_418_ap_done),
    .ap_idle(grp_reset_mem_fu_418_ap_idle),
    .ap_ready(grp_reset_mem_fu_418_ap_ready),
    .sram_idx_V_read(grp_reset_mem_fu_418_sram_idx_V_read),
    .range_V(grp_reset_mem_fu_418_range_V),
    .mem_V_Addr_A(grp_reset_mem_fu_418_mem_V_Addr_A),
    .mem_V_EN_A(grp_reset_mem_fu_418_mem_V_EN_A),
    .mem_V_WEN_A(grp_reset_mem_fu_418_mem_V_WEN_A),
    .mem_V_Din_A(grp_reset_mem_fu_418_mem_V_Din_A),
    .mem_V_Dout_A(128'd0),
    .ap_return(grp_reset_mem_fu_418_ap_return)
);

load_mul_16s_4ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
load_mul_16s_4ns_16_1_1_U3(
    .din0(x_width_V_reg_1208),
    .din1(y_offset_0_V_fu_586_p1),
    .dout(y_offset_0_V_fu_586_p2)
);

load_mul_16s_4ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
load_mul_16s_4ns_16_1_1_U4(
    .din0(x_width_V_reg_1208),
    .din1(y_offset_1_V_fu_604_p1),
    .dout(y_offset_1_V_fu_604_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state26) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state26)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state26);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        g2l_dep_queue_V_0_state <= 2'd0;
    end else begin
        if ((((g2l_dep_queue_V_0_vld_in == 1'b0) & (g2l_dep_queue_V_0_state == 2'd2)) | ((g2l_dep_queue_V_0_vld_in == 1'b0) & (g2l_dep_queue_V_0_ack_out == 1'b1) & (g2l_dep_queue_V_0_state == 2'd3)))) begin
            g2l_dep_queue_V_0_state <= 2'd2;
        end else if ((((g2l_dep_queue_V_0_ack_out == 1'b0) & (g2l_dep_queue_V_0_state == 2'd1)) | ((g2l_dep_queue_V_0_ack_out == 1'b0) & (g2l_dep_queue_V_0_vld_in == 1'b1) & (g2l_dep_queue_V_0_state == 2'd3)))) begin
            g2l_dep_queue_V_0_state <= 2'd1;
        end else if (((~((g2l_dep_queue_V_0_vld_in == 1'b0) & (g2l_dep_queue_V_0_ack_out == 1'b1)) & ~((g2l_dep_queue_V_0_ack_out == 1'b0) & (g2l_dep_queue_V_0_vld_in == 1'b1)) & (g2l_dep_queue_V_0_state == 2'd3)) | ((g2l_dep_queue_V_0_ack_out == 1'b1) & (g2l_dep_queue_V_0_state == 2'd1)) | ((g2l_dep_queue_V_0_vld_in == 1'b1) & (g2l_dep_queue_V_0_state == 2'd2)))) begin
            g2l_dep_queue_V_0_state <= 2'd3;
        end else begin
            g2l_dep_queue_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_reset_mem_fu_418_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state16) | ((1'b1 == ap_CS_fsm_state18) & (icmp_ln62_fu_918_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state18) & (icmp_ln62_fu_918_p2 == 1'd0)))) begin
            grp_reset_mem_fu_418_ap_start_reg <= 1'b1;
        end else if ((grp_reset_mem_fu_418_ap_ready == 1'b1)) begin
            grp_reset_mem_fu_418_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        l2g_dep_queue_V_1_sel_rd <= 1'b0;
    end else begin
        if (((l2g_dep_queue_V_1_ack_out == 1'b1) & (l2g_dep_queue_V_1_vld_out == 1'b1))) begin
            l2g_dep_queue_V_1_sel_rd <= ~l2g_dep_queue_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        l2g_dep_queue_V_1_state <= 2'd0;
    end else begin
        if ((((l2g_dep_queue_V_1_vld_in == 1'b0) & (l2g_dep_queue_V_1_state == 2'd2)) | ((l2g_dep_queue_V_1_vld_in == 1'b0) & (l2g_dep_queue_V_1_ack_out == 1'b1) & (l2g_dep_queue_V_1_state == 2'd3)))) begin
            l2g_dep_queue_V_1_state <= 2'd2;
        end else if ((((l2g_dep_queue_V_TREADY == 1'b0) & (l2g_dep_queue_V_1_state == 2'd1)) | ((l2g_dep_queue_V_TREADY == 1'b0) & (l2g_dep_queue_V_1_vld_in == 1'b1) & (l2g_dep_queue_V_1_state == 2'd3)))) begin
            l2g_dep_queue_V_1_state <= 2'd1;
        end else if (((~((l2g_dep_queue_V_1_vld_in == 1'b0) & (l2g_dep_queue_V_1_ack_out == 1'b1)) & ~((l2g_dep_queue_V_TREADY == 1'b0) & (l2g_dep_queue_V_1_vld_in == 1'b1)) & (l2g_dep_queue_V_1_state == 2'd3)) | ((l2g_dep_queue_V_1_ack_out == 1'b1) & (l2g_dep_queue_V_1_state == 2'd1)) | ((l2g_dep_queue_V_1_vld_in == 1'b1) & (l2g_dep_queue_V_1_state == 2'd2)))) begin
            l2g_dep_queue_V_1_state <= 2'd3;
        end else begin
            l2g_dep_queue_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        load_queue_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((load_queue_V_V_0_ack_out == 1'b1) & (load_queue_V_V_0_vld_out == 1'b1))) begin
            load_queue_V_V_0_sel_rd <= ~load_queue_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        load_queue_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((load_queue_V_V_0_ack_in == 1'b1) & (load_queue_V_V_0_vld_in == 1'b1))) begin
            load_queue_V_V_0_sel_wr <= ~load_queue_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        load_queue_V_V_0_state <= 2'd0;
    end else begin
        if ((((load_queue_V_V_0_vld_in == 1'b0) & (load_queue_V_V_0_state == 2'd2)) | ((load_queue_V_V_0_vld_in == 1'b0) & (load_queue_V_V_0_ack_out == 1'b1) & (load_queue_V_V_0_state == 2'd3)))) begin
            load_queue_V_V_0_state <= 2'd2;
        end else if ((((load_queue_V_V_0_ack_out == 1'b0) & (load_queue_V_V_0_state == 2'd1)) | ((load_queue_V_V_0_ack_out == 1'b0) & (load_queue_V_V_0_vld_in == 1'b1) & (load_queue_V_V_0_state == 2'd3)))) begin
            load_queue_V_V_0_state <= 2'd1;
        end else if (((~((load_queue_V_V_0_vld_in == 1'b0) & (load_queue_V_V_0_ack_out == 1'b1)) & ~((load_queue_V_V_0_ack_out == 1'b0) & (load_queue_V_V_0_vld_in == 1'b1)) & (load_queue_V_V_0_state == 2'd3)) | ((load_queue_V_V_0_ack_out == 1'b1) & (load_queue_V_V_0_state == 2'd1)) | ((load_queue_V_V_0_vld_in == 1'b1) & (load_queue_V_V_0_state == 2'd2)))) begin
            load_queue_V_V_0_state <= 2'd3;
        end else begin
            load_queue_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((grp_reset_mem_fu_418_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state31)) begin
            dram_idx_assign_0_reg_386 <= add_ln700_1_reg_1465;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            dram_idx_assign_0_reg_386 <= {{tmp_V_reg_1171[57:26]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        dram_idx_assign_1_0_reg_344 <= add_ln700_3_fu_895_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln219_fu_624_p2 == 1'd1) & (icmp_ln206_fu_618_p2 == 1'd0))) begin
        dram_idx_assign_1_0_reg_344 <= {{tmp_V_reg_1171[57:26]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_op_assign_1_reg_354 <= y_1_reg_1255;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln219_fu_624_p2 == 1'd1) & (icmp_ln206_fu_618_p2 == 1'd0))) begin
        i_op_assign_1_reg_354 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_reset_mem_fu_418_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state31)) begin
            i_op_assign_reg_396 <= y_reg_1381;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            i_op_assign_reg_396 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln67_fu_968_p2 == 1'd0))) begin
        phi_ln67_reg_407 <= add_ln67_fu_973_p2;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        phi_ln67_reg_407 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_reg_1276 == 1'd0))) begin
        phi_ln89_reg_365 <= add_ln89_reg_1280;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        phi_ln89_reg_365 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        sram_idx_V_assign_1_s_reg_334 <= add_ln700_2_fu_890_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln219_fu_624_p2 == 1'd1) & (icmp_ln206_fu_618_p2 == 1'd0))) begin
        sram_idx_V_assign_1_s_reg_334 <= {{tmp_V_reg_1171[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln62_fu_918_p2 == 1'd0))) begin
        add_ln66_reg_1386 <= add_ln66_fu_942_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        add_ln700_1_reg_1465 <= add_ln700_1_fu_1149_p2;
        add_ln700_reg_1460 <= add_ln700_fu_1144_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln219_reg_1233 == 1'd1) & (icmp_ln86_fu_645_p2 == 1'd0))) begin
        add_ln88_reg_1260 <= add_ln88_fu_669_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln89_reg_1280 <= add_ln89_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln67_reg_1412_pp1_iter1_reg == 1'd0))) begin
        and_ln67_1_reg_1455 <= and_ln67_1_fu_1116_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln89_2_reg_1338 <= and_ln89_2_fu_859_p2;
        and_ln89_reg_1333 <= and_ln89_fu_853_p2;
        icmp_ln89_reg_1276 <= icmp_ln89_fu_696_p2;
        trunc_ln89_2_reg_1285_pp0_iter1_reg <= trunc_ln89_2_reg_1285;
        wgt_mem_0_V_addr_reg_1323 <= zext_ln89_1_fu_759_p1;
        wgt_mem_1_V_addr_reg_1328 <= zext_ln89_1_fu_759_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln89_reg_1276 == 1'd0))) begin
        data_port_addr_1_rea_reg_1300 <= data_port_RDATA;
        empty_20_reg_1310[9 : 6] <= empty_20_fu_747_p2[9 : 6];
        icmp_ln89_1_reg_1315 <= icmp_ln89_1_fu_753_p2;
        shl_ln89_2_reg_1305[9 : 6] <= shl_ln89_2_fu_740_p3[9 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln67_reg_1412 == 1'd0))) begin
        data_port_addr_read_reg_1432 <= data_port_RDATA;
        empty_17_reg_1442[6] <= empty_17_fu_1009_p2[6];
        icmp_ln67_1_reg_1447 <= icmp_ln67_1_fu_1015_p2;
        shl_ln67_2_reg_1437[6] <= shl_ln67_2_fu_1002_p3[6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln206_reg_1229 <= icmp_ln206_fu_618_p2;
        y_offset_0_V_reg_1219 <= y_offset_0_V_fu_586_p2;
        y_offset_1_V_reg_1224 <= y_offset_1_V_fu_604_p2;
        zext_ln200_1_reg_1214[3 : 0] <= zext_ln200_1_fu_570_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln206_fu_618_p2 == 1'd0))) begin
        icmp_ln219_reg_1233 <= icmp_ln219_fu_624_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln67_reg_1412 <= icmp_ln67_fu_968_p2;
        icmp_ln67_reg_1412_pp1_iter1_reg <= icmp_ln67_reg_1412;
        lshr_ln_reg_1421_pp1_iter1_reg <= lshr_ln_reg_1421;
        trunc_ln67_2_reg_1426_pp1_iter1_reg <= trunc_ln67_2_reg_1426;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln67_reg_1412_pp1_iter2_reg <= icmp_ln67_reg_1412_pp1_iter1_reg;
        lshr_ln_reg_1421_pp1_iter2_reg <= lshr_ln_reg_1421_pp1_iter1_reg;
        trunc_ln67_2_reg_1426_pp1_iter2_reg <= trunc_ln67_2_reg_1426_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((load_queue_V_V_0_load_A == 1'b1)) begin
        load_queue_V_V_0_payload_A <= load_queue_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((load_queue_V_V_0_load_B == 1'b1)) begin
        load_queue_V_V_0_payload_B <= load_queue_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_fu_696_p2 == 1'd0))) begin
        lshr_ln1_reg_1290 <= {{add_ln89_1_fu_715_p2[16:5]}};
        tmp_9_reg_1295 <= {{ap_phi_mux_phi_ln89_phi_fu_369_p4[4:1]}};
        trunc_ln89_2_reg_1285 <= trunc_ln89_2_fu_711_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln67_fu_968_p2 == 1'd0))) begin
        lshr_ln_reg_1421 <= {{add_ln67_1_fu_983_p2[13:1]}};
        trunc_ln67_2_reg_1426 <= trunc_ln67_2_fu_998_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (load_queue_V_V_0_vld_out == 1'b0) | ((g2l_dep_queue_V_0_vld_out == 1'b0) & (tmp_2_fu_508_p3 == 1'd1))) & (1'b1 == ap_CS_fsm_state1))) begin
        p_cast7_reg_1166[28 : 0] <= p_cast7_fu_504_p1[28 : 0];
        p_cast8_reg_1161[28 : 0] <= p_cast8_fu_490_p1[28 : 0];
        tmp_V_reg_1171 <= load_queue_V_V_0_data_out;
        trunc_ln200_1_reg_1195 <= {{load_queue_V_V_0_data_out[95:80]}};
        trunc_ln200_2_reg_1203 <= trunc_ln200_2_fu_546_p1;
        trunc_ln200_reg_1190 <= trunc_ln200_fu_522_p1;
        x_width_V_reg_1208 <= x_width_V_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln219_fu_624_p2 == 1'd1) & (icmp_ln206_fu_618_p2 == 1'd0)))) begin
        reg_464 <= {{tmp_V_reg_1171[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_reset_mem_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln219_fu_624_p2 == 1'd1) & (icmp_ln206_fu_618_p2 == 1'd0)))) begin
        reg_476 <= {{tmp_V_reg_1171[79:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln219_fu_624_p2 == 1'd1) & (icmp_ln206_fu_618_p2 == 1'd0))) begin
        shl_ln1_reg_1242[20 : 5] <= shl_ln1_fu_634_p3[20 : 5];
        zext_ln700_1_reg_1237[15 : 0] <= zext_ln700_1_fu_630_p1[15 : 0];
        zext_ln89_reg_1247[20 : 5] <= zext_ln89_fu_641_p1[20 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        shl_ln67_1_reg_1407[13 : 1] <= shl_ln67_1_fu_961_p3[13 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        shl_ln89_1_reg_1271[16 : 5] <= shl_ln89_1_fu_688_p3[16 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((grp_reset_mem_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        shl_ln_reg_1368[16 : 1] <= shl_ln_fu_907_p3[16 : 1];
        zext_ln209_1_reg_1358[3 : 0] <= zext_ln209_1_fu_900_p1[3 : 0];
        zext_ln67_reg_1373[16 : 1] <= zext_ln67_fu_914_p1[16 : 1];
        zext_ln700_reg_1363[15 : 0] <= zext_ln700_fu_903_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((((grp_reset_mem_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((grp_reset_mem_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17)))) begin
        sram_idx_V_assign_0_reg_376 <= grp_reset_mem_fu_418_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((~((grp_reset_mem_fu_418_ap_done == 1'b0) | (data_port_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state19))) begin
        sram_idx_V_assign_3_reg_1391 <= grp_reset_mem_fu_418_ap_return;
        trunc_ln67_reg_1402 <= trunc_ln67_fu_957_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state32_on_subcall_done) | (1'b1 == ap_block_state32_io)) & (1'b1 == ap_CS_fsm_state32))) begin
        tmp_7_reg_1475 <= tmp_V_reg_1171[32'd6];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln219_reg_1233 == 1'd1))) begin
        y_1_reg_1255 <= y_1_fu_651_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        y_reg_1381 <= y_fu_924_p2;
    end
end

always @ (*) begin
    if ((icmp_ln89_fu_696_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln67_fu_968_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state26 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state26 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state33_io) | (l2g_dep_queue_V_1_state == 2'd1) | ((l2g_dep_queue_V_TREADY == 1'b0) & (l2g_dep_queue_V_1_state == 2'd3))) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_reg_1276 == 1'd0))) begin
        ap_phi_mux_phi_ln89_phi_fu_369_p4 = add_ln89_reg_1280;
    end else begin
        ap_phi_mux_phi_ln89_phi_fu_369_p4 = phi_ln89_reg_365;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state33_io) | (l2g_dep_queue_V_1_state == 2'd1) | ((l2g_dep_queue_V_TREADY == 1'b0) & (l2g_dep_queue_V_1_state == 2'd3))) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((grp_reset_mem_fu_418_ap_done == 1'b0) | (data_port_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state19))) begin
        data_port_ARADDR = zext_ln66_fu_947_p1;
    end else if (((data_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        data_port_ARADDR = zext_ln88_fu_674_p1;
    end else begin
        data_port_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((~((grp_reset_mem_fu_418_ap_done == 1'b0) | (data_port_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state19))) begin
        data_port_ARLEN = zext_ln67_reg_1373;
    end else if (((data_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        data_port_ARLEN = zext_ln89_reg_1247;
    end else begin
        data_port_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((data_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | (~((grp_reset_mem_fu_418_ap_done == 1'b0) | (data_port_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state19)))) begin
        data_port_ARVALID = 1'b1;
    end else begin
        data_port_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln89_reg_1276 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln67_reg_1412 == 1'd0)))) begin
        data_port_RREADY = 1'b1;
    end else begin
        data_port_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state19))) begin
        data_port_blk_n_AR = m_axi_data_port_ARREADY;
    end else begin
        data_port_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln89_reg_1276 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln67_reg_1412 == 1'd0)))) begin
        data_port_blk_n_R = m_axi_data_port_RVALID;
    end else begin
        data_port_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (load_queue_V_V_0_vld_out == 1'b0) | ((g2l_dep_queue_V_0_vld_out == 1'b0) & (tmp_2_fu_508_p3 == 1'd1))) & (1'b1 == ap_CS_fsm_state1) & (tmp_2_fu_508_p3 == 1'd1))) begin
        g2l_dep_queue_V_0_ack_out = 1'b1;
    end else begin
        g2l_dep_queue_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (tmp_2_fu_508_p3 == 1'd1))) begin
        g2l_dep_queue_V_TDATA_blk_n = g2l_dep_queue_V_0_state[1'd0];
    end else begin
        g2l_dep_queue_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_reset_mem_fu_418_range_V = zext_ln200_1_reg_1214;
    end else if (((1'b1 == ap_CS_fsm_state32) & (icmp_ln206_reg_1229 == 1'd1))) begin
        grp_reset_mem_fu_418_range_V = y_offset_1_V_reg_1224;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_reset_mem_fu_418_range_V = zext_ln209_1_reg_1358;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_reset_mem_fu_418_range_V = y_offset_0_V_reg_1219;
    end else begin
        grp_reset_mem_fu_418_range_V = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_reset_mem_fu_418_sram_idx_V_read = add_ln700_reg_1460;
    end else if (((1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_state32) & (icmp_ln206_reg_1229 == 1'd1)))) begin
        grp_reset_mem_fu_418_sram_idx_V_read = sram_idx_V_assign_0_reg_376;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_reset_mem_fu_418_sram_idx_V_read = reg_464;
    end else begin
        grp_reset_mem_fu_418_sram_idx_V_read = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_state32) & (icmp_ln206_reg_1229 == 1'd1)))) begin
        inp_mem_V_Addr_A = grp_reset_mem_fu_418_mem_V_Addr_A;
    end else begin
        inp_mem_V_Addr_A = inp_mem_V_Addr_A_orig << 32'd4;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        inp_mem_V_Din_A = and_ln67_1_reg_1455;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_state32) & (icmp_ln206_reg_1229 == 1'd1)))) begin
        inp_mem_V_Din_A = grp_reset_mem_fu_418_mem_V_Din_A;
    end else begin
        inp_mem_V_Din_A = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        inp_mem_V_EN_A = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_state32) & (icmp_ln206_reg_1229 == 1'd1)))) begin
        inp_mem_V_EN_A = grp_reset_mem_fu_418_mem_V_EN_A;
    end else begin
        inp_mem_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln67_reg_1412_pp1_iter2_reg == 1'd0))) begin
        inp_mem_V_WEN_A = shl_ln67_4_fu_1137_p2;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_state32) & (icmp_ln206_reg_1229 == 1'd1)))) begin
        inp_mem_V_WEN_A = grp_reset_mem_fu_418_mem_V_WEN_A;
    end else begin
        inp_mem_V_WEN_A = 16'd0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state32_on_subcall_done) | (1'b1 == ap_block_state32_io)) & (1'b1 == ap_CS_fsm_state32) & (tmp_7_fu_1154_p3 == 1'd1))) begin
        l2g_dep_queue_V_1_vld_in = 1'b1;
    end else begin
        l2g_dep_queue_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state33) & (tmp_7_reg_1475 == 1'd1)) | ((1'b1 == ap_CS_fsm_state32) & (tmp_7_fu_1154_p3 == 1'd1)))) begin
        l2g_dep_queue_V_TDATA_blk_n = l2g_dep_queue_V_1_state[1'd1];
    end else begin
        l2g_dep_queue_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (load_queue_V_V_0_vld_out == 1'b0) | ((g2l_dep_queue_V_0_vld_out == 1'b0) & (tmp_2_fu_508_p3 == 1'd1))) & (1'b1 == ap_CS_fsm_state1))) begin
        load_queue_V_V_0_ack_out = 1'b1;
    end else begin
        load_queue_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((load_queue_V_V_0_sel == 1'b1)) begin
        load_queue_V_V_0_data_out = load_queue_V_V_0_payload_B;
    end else begin
        load_queue_V_V_0_data_out = load_queue_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        load_queue_V_V_TDATA_blk_n = load_queue_V_V_0_state[1'd0];
    end else begin
        load_queue_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            wgt_mem_0_V_Addr_A_orig = wgt_mem_0_V_addr_reg_1323;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            wgt_mem_0_V_Addr_A_orig = zext_ln89_1_fu_759_p1;
        end else begin
            wgt_mem_0_V_Addr_A_orig = 'bx;
        end
    end else begin
        wgt_mem_0_V_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        wgt_mem_0_V_EN_A = 1'b1;
    end else begin
        wgt_mem_0_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln89_2_reg_1285_pp0_iter1_reg == 1'd0))) begin
        wgt_mem_0_V_WEN_A = 128'd340282366920938463463374607431768211455;
    end else begin
        wgt_mem_0_V_WEN_A = 128'd0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            wgt_mem_1_V_Addr_A_orig = wgt_mem_1_V_addr_reg_1328;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            wgt_mem_1_V_Addr_A_orig = zext_ln89_1_fu_759_p1;
        end else begin
            wgt_mem_1_V_Addr_A_orig = 'bx;
        end
    end else begin
        wgt_mem_1_V_Addr_A_orig = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        wgt_mem_1_V_EN_A = 1'b1;
    end else begin
        wgt_mem_1_V_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln89_2_reg_1285_pp0_iter1_reg == 1'd1))) begin
        wgt_mem_1_V_WEN_A = 128'd340282366920938463463374607431768211455;
    end else begin
        wgt_mem_1_V_WEN_A = 128'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (load_queue_V_V_0_vld_out == 1'b0) | ((g2l_dep_queue_V_0_vld_out == 1'b0) & (tmp_2_fu_508_p3 == 1'd1))) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln206_fu_618_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((icmp_ln86_fu_645_p2 == 1'd1) | (icmp_ln219_reg_1233 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((data_port_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln89_fu_696_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln89_fu_696_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((grp_reset_mem_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln62_fu_918_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            if ((~((grp_reset_mem_fu_418_ap_done == 1'b0) | (data_port_ARREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln67_fu_968_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln67_fu_968_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((grp_reset_mem_fu_418_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if ((~((1'b1 == ap_block_state32_on_subcall_done) | (1'b1 == ap_block_state32_io)) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if ((~((1'b1 == ap_block_state33_io) | (l2g_dep_queue_V_1_state == 2'd1) | ((l2g_dep_queue_V_TREADY == 1'b0) & (l2g_dep_queue_V_1_state == 2'd3))) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln301_fu_554_p2 = (zext_ln301_fu_550_p1 + zext_ln200_fu_526_p1);

assign add_ln66_fu_942_p2 = (p_cast7_reg_1166 + zext_ln1352_fu_938_p1);

assign add_ln67_1_fu_983_p2 = (shl_ln67_1_reg_1407 + trunc_ln67_1_fu_979_p1);

assign add_ln67_fu_973_p2 = (phi_ln67_reg_407 + 17'd1);

assign add_ln700_1_fu_1149_p2 = (zext_ln700_reg_1363 + dram_idx_assign_0_reg_386);

assign add_ln700_2_fu_890_p2 = (trunc_ln200_1_reg_1195 + sram_idx_V_assign_1_s_reg_334);

assign add_ln700_3_fu_895_p2 = (zext_ln700_1_reg_1237 + dram_idx_assign_1_0_reg_344);

assign add_ln700_fu_1144_p2 = (sram_idx_V_assign_3_reg_1391 + trunc_ln200_1_reg_1195);

assign add_ln88_fu_669_p2 = (p_cast8_reg_1161 + zext_ln1352_1_fu_665_p1);

assign add_ln89_1_fu_715_p2 = (trunc_ln89_1_fu_707_p1 + shl_ln89_1_reg_1271);

assign add_ln89_fu_701_p2 = (ap_phi_mux_phi_ln89_phi_fu_369_p4 + 21'd1);

assign and_ln67_1_fu_1116_p2 = (select_ln67_3_fu_1091_p3 & and_ln67_fu_1110_p2);

assign and_ln67_fu_1110_p2 = (shl_ln67_3_fu_1098_p2 & lshr_ln67_fu_1104_p2);

assign and_ln89_1_fu_877_p2 = (xor_ln89_2_fu_872_p2 & select_ln89_fu_865_p3);

assign and_ln89_2_fu_859_p2 = (select_ln89_4_fu_834_p3 & and_ln89_fu_853_p2);

assign and_ln89_fu_853_p2 = (shl_ln89_3_fu_841_p2 & lshr_ln89_fu_847_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((data_port_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln89_reg_1276 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((data_port_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln89_reg_1276 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((data_port_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln67_reg_1412 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((data_port_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln67_reg_1412 == 1'd0));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (load_queue_V_V_0_vld_out == 1'b0) | ((g2l_dep_queue_V_0_vld_out == 1'b0) & (tmp_2_fu_508_p3 == 1'd1)));
end

assign ap_block_state11_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage1_iter0 = ((data_port_RVALID == 1'b0) & (icmp_ln89_reg_1276 == 1'd0));
end

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_pp1_stage0_iter1 = ((data_port_RVALID == 1'b0) & (icmp_ln67_reg_1412 == 1'd0));
end

assign ap_block_state28_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_io = ((l2g_dep_queue_V_1_ack_in == 1'b0) & (tmp_7_fu_1154_p3 == 1'd1));
end

always @ (*) begin
    ap_block_state32_on_subcall_done = ((grp_reset_mem_fu_418_ap_done == 1'b0) & (icmp_ln206_reg_1229 == 1'd1));
end

always @ (*) begin
    ap_block_state33 = ((l2g_dep_queue_V_1_state == 2'd1) | ((l2g_dep_queue_V_TREADY == 1'b0) & (l2g_dep_queue_V_1_state == 2'd3)));
end

always @ (*) begin
    ap_block_state33_io = ((l2g_dep_queue_V_1_ack_in == 1'b0) & (tmp_7_reg_1475 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_17_fu_1009_p2 = (shl_ln67_2_fu_1002_p3 | 7'd63);

assign empty_20_fu_747_p2 = (shl_ln89_2_fu_740_p3 | 10'd63);

assign g2l_dep_queue_V_0_vld_in = g2l_dep_queue_V_TVALID;

assign g2l_dep_queue_V_0_vld_out = g2l_dep_queue_V_0_state[1'd0];

assign g2l_dep_queue_V_TREADY = g2l_dep_queue_V_0_state[1'd1];

assign grp_fu_455_p4 = {{tmp_V_reg_1171[111:96]}};

assign grp_reset_mem_fu_418_ap_start = grp_reset_mem_fu_418_ap_start_reg;

assign icmp_ln206_fu_618_p2 = ((trunc_ln2_fu_609_p4 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln219_fu_624_p2 = ((trunc_ln2_fu_609_p4 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_918_p2 = ((i_op_assign_reg_396 == reg_476) ? 1'b1 : 1'b0);

assign icmp_ln67_1_fu_1015_p2 = ((shl_ln67_2_fu_1002_p3 > empty_17_fu_1009_p2) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_968_p2 = ((phi_ln67_reg_407 == shl_ln_reg_1368) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_645_p2 = ((i_op_assign_1_reg_354 == reg_476) ? 1'b1 : 1'b0);

assign icmp_ln89_1_fu_753_p2 = ((shl_ln89_2_fu_740_p3 > empty_20_fu_747_p2) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_696_p2 = ((ap_phi_mux_phi_ln89_phi_fu_369_p4 == shl_ln1_reg_1242) ? 1'b1 : 1'b0);

assign inp_mem_V_Addr_A_orig = zext_ln67_1_fu_1122_p1;

assign inp_mem_V_Clk_A = ap_clk;

assign inp_mem_V_Rst_A = ap_rst_n_inv;

assign l2g_dep_queue_V_1_ack_in = l2g_dep_queue_V_1_state[1'd1];

assign l2g_dep_queue_V_1_ack_out = l2g_dep_queue_V_TREADY;

assign l2g_dep_queue_V_1_data_out = 8'd1;

assign l2g_dep_queue_V_1_sel = l2g_dep_queue_V_1_sel_rd;

assign l2g_dep_queue_V_1_vld_out = l2g_dep_queue_V_1_state[1'd0];

assign l2g_dep_queue_V_TDATA = l2g_dep_queue_V_1_data_out;

assign l2g_dep_queue_V_TVALID = l2g_dep_queue_V_1_state[1'd0];

assign load_queue_V_V_0_ack_in = load_queue_V_V_0_state[1'd1];

assign load_queue_V_V_0_load_A = (load_queue_V_V_0_state_cmp_full & ~load_queue_V_V_0_sel_wr);

assign load_queue_V_V_0_load_B = (load_queue_V_V_0_state_cmp_full & load_queue_V_V_0_sel_wr);

assign load_queue_V_V_0_sel = load_queue_V_V_0_sel_rd;

assign load_queue_V_V_0_state_cmp_full = ((load_queue_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign load_queue_V_V_0_vld_in = load_queue_V_V_TVALID;

assign load_queue_V_V_0_vld_out = load_queue_V_V_0_state[1'd0];

assign load_queue_V_V_TREADY = load_queue_V_V_0_state[1'd1];

assign lshr_ln200_1_fu_540_p2 = load_queue_V_V_0_data_out >> 128'd124;

assign lshr_ln200_fu_516_p2 = load_queue_V_V_0_data_out >> 128'd120;

assign lshr_ln67_fu_1104_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln67_7_fu_1071_p1;

assign lshr_ln89_fu_847_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln89_7_fu_814_p1;

assign or_ln89_fu_883_p2 = (and_ln89_2_reg_1338 | and_ln89_1_fu_877_p2);

assign p_cast7_fu_504_p1 = tmp_1_fu_494_p4;

assign p_cast8_fu_490_p1 = tmp_fu_480_p4;

assign ret_V_1_fu_657_p3 = {{dram_idx_assign_1_0_reg_344}, {5'd0}};

assign ret_V_fu_930_p3 = {{dram_idx_assign_0_reg_386}, {1'd0}};

assign select_ln67_1_fu_1043_p3 = ((icmp_ln67_1_reg_1447[0:0] === 1'b1) ? zext_ln67_3_fu_1024_p1 : zext_ln67_2_fu_1021_p1);

assign select_ln67_2_fu_1050_p3 = ((icmp_ln67_1_reg_1447[0:0] === 1'b1) ? xor_ln67_fu_1030_p2 : zext_ln67_2_fu_1021_p1);

assign select_ln67_3_fu_1091_p3 = ((icmp_ln67_1_reg_1447[0:0] === 1'b1) ? tmp_3_fu_1081_p4 : shl_ln67_fu_1075_p2);

assign select_ln67_fu_1036_p3 = ((icmp_ln67_1_reg_1447[0:0] === 1'b1) ? zext_ln67_2_fu_1021_p1 : zext_ln67_3_fu_1024_p1);

assign select_ln89_1_fu_779_p3 = ((icmp_ln89_1_reg_1315[0:0] === 1'b1) ? zext_ln89_2_fu_764_p1 : zext_ln89_3_fu_767_p1);

assign select_ln89_2_fu_786_p3 = ((icmp_ln89_1_reg_1315[0:0] === 1'b1) ? zext_ln89_3_fu_767_p1 : zext_ln89_2_fu_764_p1);

assign select_ln89_3_fu_793_p3 = ((icmp_ln89_1_reg_1315[0:0] === 1'b1) ? xor_ln89_fu_773_p2 : zext_ln89_2_fu_764_p1);

assign select_ln89_4_fu_834_p3 = ((icmp_ln89_1_reg_1315[0:0] === 1'b1) ? tmp_8_fu_824_p4 : shl_ln89_fu_818_p2);

assign select_ln89_fu_865_p3 = ((trunc_ln89_2_reg_1285_pp0_iter1_reg[0:0] === 1'b1) ? wgt_mem_1_V_Dout_A : wgt_mem_0_V_Dout_A);

assign shl_ln1_fu_634_p3 = {{trunc_ln200_1_reg_1195}, {5'd0}};

assign shl_ln67_1_fu_961_p3 = {{trunc_ln67_reg_1402}, {1'd0}};

assign shl_ln67_2_fu_1002_p3 = {{trunc_ln67_2_reg_1426}, {6'd0}};

assign shl_ln67_3_fu_1098_p2 = 128'd340282366920938463463374607431768211455 << zext_ln67_6_fu_1067_p1;

assign shl_ln67_4_fu_1137_p2 = 16'd255 << zext_ln67_8_fu_1133_p1;

assign shl_ln67_fu_1075_p2 = zext_ln67_4_fu_1027_p1 << zext_ln67_5_fu_1063_p1;

assign shl_ln89_1_fu_688_p3 = {{trunc_ln89_fu_684_p1}, {5'd0}};

assign shl_ln89_2_fu_740_p3 = {{tmp_9_reg_1295}, {6'd0}};

assign shl_ln89_3_fu_841_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 << zext_ln89_6_fu_810_p1;

assign shl_ln89_fu_818_p2 = zext_ln89_4_fu_770_p1 << zext_ln89_5_fu_806_p1;

assign shl_ln_fu_907_p3 = {{trunc_ln200_1_reg_1195}, {1'd0}};

assign tmp_1_fu_494_p4 = {{inputs_V[31:3]}};

assign tmp_2_fu_508_p3 = load_queue_V_V_0_data_out[32'd4];

integer ap_tvar_int_0;

always @ (shl_ln67_fu_1075_p2) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_3_fu_1081_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_3_fu_1081_p4[ap_tvar_int_0] = shl_ln67_fu_1075_p2[127 - ap_tvar_int_0];
        end
    end
end

assign tmp_5_fu_1126_p3 = {{trunc_ln67_2_reg_1426_pp1_iter2_reg}, {3'd0}};

assign tmp_7_fu_1154_p3 = tmp_V_reg_1171[32'd6];

integer ap_tvar_int_1;

always @ (shl_ln89_fu_818_p2) begin
    for (ap_tvar_int_1 = 1024 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 1023 - 0) begin
            tmp_8_fu_824_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_8_fu_824_p4[ap_tvar_int_1] = shl_ln89_fu_818_p2[1023 - ap_tvar_int_1];
        end
    end
end

assign tmp_fu_480_p4 = {{weights_V[31:3]}};

assign trunc_ln1_fu_573_p4 = {{tmp_V_reg_1171[115:112]}};

assign trunc_ln200_1_fu_530_p4 = {{load_queue_V_V_0_data_out[95:80]}};

assign trunc_ln200_2_fu_546_p1 = lshr_ln200_1_fu_540_p2[3:0];

assign trunc_ln200_fu_522_p1 = lshr_ln200_fu_516_p2[3:0];

assign trunc_ln209_1_fu_591_p4 = {{tmp_V_reg_1171[119:116]}};

assign trunc_ln2_fu_609_p4 = {{tmp_V_reg_1171[9:7]}};

assign trunc_ln67_1_fu_979_p1 = phi_ln67_reg_407[13:0];

assign trunc_ln67_2_fu_998_p1 = phi_ln67_reg_407[0:0];

assign trunc_ln67_fu_957_p1 = grp_reset_mem_fu_418_ap_return[12:0];

assign trunc_ln89_1_fu_707_p1 = ap_phi_mux_phi_ln89_phi_fu_369_p4[16:0];

assign trunc_ln89_2_fu_711_p1 = ap_phi_mux_phi_ln89_phi_fu_369_p4[0:0];

assign trunc_ln89_fu_684_p1 = sram_idx_V_assign_1_s_reg_334[11:0];

assign wgt_mem_0_V_Addr_A = wgt_mem_0_V_Addr_A_orig << 32'd7;

assign wgt_mem_0_V_Clk_A = ap_clk;

assign wgt_mem_0_V_Din_A = or_ln89_fu_883_p2;

assign wgt_mem_0_V_Rst_A = ap_rst_n_inv;

assign wgt_mem_1_V_Addr_A = wgt_mem_1_V_Addr_A_orig << 32'd7;

assign wgt_mem_1_V_Clk_A = ap_clk;

assign wgt_mem_1_V_Din_A = or_ln89_fu_883_p2;

assign wgt_mem_1_V_Rst_A = ap_rst_n_inv;

assign x_width_V_fu_564_p2 = (trunc_ln200_1_fu_530_p4 + zext_ln301_1_fu_560_p1);

assign xor_ln67_1_fu_1057_p2 = (select_ln67_fu_1036_p3 ^ 8'd127);

assign xor_ln67_fu_1030_p2 = (zext_ln67_2_fu_1021_p1 ^ 8'd127);

assign xor_ln89_1_fu_800_p2 = (select_ln89_1_fu_779_p3 ^ 11'd1023);

assign xor_ln89_2_fu_872_p2 = (1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 ^ and_ln89_reg_1333);

assign xor_ln89_fu_773_p2 = (zext_ln89_2_fu_764_p1 ^ 11'd1023);

assign y_1_fu_651_p2 = (i_op_assign_1_reg_354 + 16'd1);

assign y_fu_924_p2 = (i_op_assign_reg_396 + 16'd1);

assign y_offset_0_V_fu_586_p1 = y_offset_0_V_fu_586_p10;

assign y_offset_0_V_fu_586_p10 = trunc_ln1_fu_573_p4;

assign y_offset_1_V_fu_604_p1 = y_offset_1_V_fu_604_p10;

assign y_offset_1_V_fu_604_p10 = trunc_ln209_1_fu_591_p4;

assign zext_ln1352_1_fu_665_p1 = ret_V_1_fu_657_p3;

assign zext_ln1352_fu_938_p1 = ret_V_fu_930_p3;

assign zext_ln200_1_fu_570_p1 = trunc_ln200_2_reg_1203;

assign zext_ln200_fu_526_p1 = trunc_ln200_fu_522_p1;

assign zext_ln209_1_fu_900_p1 = trunc_ln200_reg_1190;

assign zext_ln301_1_fu_560_p1 = add_ln301_fu_554_p2;

assign zext_ln301_fu_550_p1 = trunc_ln200_2_fu_546_p1;

assign zext_ln66_fu_947_p1 = add_ln66_reg_1386;

assign zext_ln67_1_fu_1122_p1 = lshr_ln_reg_1421_pp1_iter2_reg;

assign zext_ln67_2_fu_1021_p1 = shl_ln67_2_reg_1437;

assign zext_ln67_3_fu_1024_p1 = empty_17_reg_1442;

assign zext_ln67_4_fu_1027_p1 = data_port_addr_read_reg_1432;

assign zext_ln67_5_fu_1063_p1 = select_ln67_2_fu_1050_p3;

assign zext_ln67_6_fu_1067_p1 = select_ln67_1_fu_1043_p3;

assign zext_ln67_7_fu_1071_p1 = xor_ln67_1_fu_1057_p2;

assign zext_ln67_8_fu_1133_p1 = tmp_5_fu_1126_p3;

assign zext_ln67_fu_914_p1 = shl_ln_fu_907_p3;

assign zext_ln700_1_fu_630_p1 = grp_fu_455_p4;

assign zext_ln700_fu_903_p1 = grp_fu_455_p4;

assign zext_ln88_fu_674_p1 = add_ln88_reg_1260;

assign zext_ln89_1_fu_759_p1 = lshr_ln1_reg_1290;

assign zext_ln89_2_fu_764_p1 = shl_ln89_2_reg_1305;

assign zext_ln89_3_fu_767_p1 = empty_20_reg_1310;

assign zext_ln89_4_fu_770_p1 = data_port_addr_1_rea_reg_1300;

assign zext_ln89_5_fu_806_p1 = select_ln89_3_fu_793_p3;

assign zext_ln89_6_fu_810_p1 = select_ln89_2_fu_786_p3;

assign zext_ln89_7_fu_814_p1 = xor_ln89_1_fu_800_p2;

assign zext_ln89_fu_641_p1 = shl_ln1_fu_634_p3;

always @ (posedge ap_clk) begin
    p_cast8_reg_1161[37:29] <= 9'b000000000;
    p_cast7_reg_1166[33:29] <= 5'b00000;
    zext_ln200_1_reg_1214[15:4] <= 12'b000000000000;
    zext_ln700_1_reg_1237[31:16] <= 16'b0000000000000000;
    shl_ln1_reg_1242[4:0] <= 5'b00000;
    zext_ln89_reg_1247[4:0] <= 5'b00000;
    zext_ln89_reg_1247[31:21] <= 11'b00000000000;
    shl_ln89_1_reg_1271[4:0] <= 5'b00000;
    shl_ln89_2_reg_1305[5:0] <= 6'b000000;
    empty_20_reg_1310[5:0] <= 6'b111111;
    zext_ln209_1_reg_1358[15:4] <= 12'b000000000000;
    zext_ln700_reg_1363[31:16] <= 16'b0000000000000000;
    shl_ln_reg_1368[0] <= 1'b0;
    zext_ln67_reg_1373[0] <= 1'b0;
    zext_ln67_reg_1373[31:17] <= 15'b000000000000000;
    shl_ln67_1_reg_1407[0] <= 1'b0;
    shl_ln67_2_reg_1437[5:0] <= 6'b000000;
    empty_17_reg_1442[5:0] <= 6'b111111;
end

endmodule //load
